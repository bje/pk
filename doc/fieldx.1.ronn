fieldx(1) -- a field extraction utility
=============================================

## SYNOPSIS

`fieldx` [<OPTIONS>] <FIELD>...<br>

## DESCRIPTION

`fieldx` prints specified fields from column based input.

OPTIONS

* `-b`, `--backslash`:
  This flag is used to allow escaping of delimiters within the input.
  If this flag is set then occurances of \<delimiter> within the input
  text will not be counted as delimiting two fields.

* `-d`, `--delimiters`=<STRING>:
  Use  all characters from STRING as field delimiters. The default
  delimiter characters are <tab> and <space>.

* `-e`, `--empty`:
  Allow empty fields. Some file formats, for example passwd(5), allow
  blank fields indicated by adjacent delimiter characters. In normal
  operation fieldx treats adjacent delimiter characters as a single
  logical delimiter, this flag reverses that behaviour.

* `-E`, `--excludes`[=<STRINGS>]:
  List of strings to exclude from output separated by :

* `-f`, `--file`=<FILE>:
  Read input from <FILE> instead of stdin.

* `-S`, `--separator`=<STRING>:
  The specified STRING is printed between requested fields on stdout. 
  If this flag is not set then fields are printed separated by a single
  <space>.

* `-N`, `--null`[=<STRING>]:
  By default fields that have been directly requested but are empty will
  be represented in the output by the string NULL. Using this flag causes
  the string <STRING> to be used instead. Using this flag without an
  arguments causes empty fields to be excluded from output without any
  indication.

* `-T`, `--trim`:
  Trim non-alphanumerics characters from the beginning and end of each
  field before printing.

* `-?`, `--help`:
  Displays a short help message.

* `--usage`:
  Give a short usage message

* `-V`, `--version`:
  Print program version

## BASICS

Select and rearrange output from column based commands:

    $ df | fieldx 6 5
    Mounted Use%
    / 9%
    /dev 1%
    /run 1%
    /run/lock 0%
    /run/shm 0%

Non-numeric fields are outputted directly:

    $ ls -l /etc | fieldx 9 is owned by 3
    adduser.conf is owned by root
    alternatives/ is owned by root
    apparmor/ is owned by root

Ranges are also supported:

    $ echo A B C D | fieldx 2-3
    B C
    $ echo A B C D | fieldx 2-
    B C D
    $ echo A B C D | fieldx -- -3  # careful, looks like a flag
    A B C
    $ echo A B C D | fieldx -
    A B C D

Change the output separator to create new file formats:

    $ ps aux | fieldx -S, 1 2 | head
    USER,PID
    root,1
    root,2
    root,3

## FIXED FORMAT FILES

Fixed formats, such as */etc/passwd*, can have different delimiters and
possibly contain empty fields:

    $ cat /etc/passwd | fieldx -e -d: 1 7
    root /bin/bash
    daemon /bin/sh
    bin /bin/sh
    sys /bin/sh

## TRIMMING

The *-T* flags trims non-alphanumeric characters from the left and right side
before printing the field to stdout. This is useful removing quotes,
parentheses or other visual delineations.

    $ echo "'Example User' <foobar@example.com>" | fieldx -T 3
    foobar@example.com

## QUOTING

Quoting is supported. Double quote is the default quote character:

    $ cat input
    "Bilbo Baggins", "The Hobbit"
    "Frodo Baggins", "The Lord of the Rings"
    $ fieldx -f input -d", " -q 2
    "The Hobbit"
    "The Lord of the Rings"

The quote character can be specified. 

    $ cat input
    'Bilbo Baggins', 'The Hobbit'
    'Frodo Baggins', 'The Lord of the Rings'
    $ fieldx -f input -d", " -q"'" 1
    'Bilbo Baggins'
    'Frodo Baggins'

A two character argument supplied to the quote flag are used as start and end:

    $ cat input
    (Bilbo Baggins) (The Hobbit)
    (Frodo Baggins) (The Lord of the Rings)
    $ fieldx -f input -q"()" 1
    (Bilbo Baggins)
    (Frodo Baggins)
    $ fieldx -f input -q"()" -T 1
    Bilbo Baggins
    Frodo Baggins

## EXCLUDES

A list of strings that will always be excluded from the output can be supplied
to fieldx via the *-E* flag. An example use case for this is when dealing with
lists of servers you may want to automatically strip fully qualified hostnames
down to their local names before passing on to another process in the pipeline.

    $ cat input
    foo.example.com 192.168.1.1 active
    bar.example.com 192.168.1.2 repair
    baz.example.net 192.168.1.3 active
    $ cat input | fieldx -E.example.com:.example.net 1 3
    foo active
    bar repair
    baz active

Alternatively, as this is likely to be a regular request, it can be set using an
environment variable. When using the environment variable the *-E* flag without
arguments can be used to ignore the setting. The *-E* flag used with arguments
will override the environment variable.
    $ export FIELDX_EXCLUDES=.example.com:.example.net
    $ cat input | fieldx 1 3
    foo active
    bar repair
    baz active
    $ cat input | fieldx -E 1 3
    foo.example.com active
    bar.example.com repair
    baz.example.net active

## ENVIRONMENT

* `FIELDX_EXCLUDES`:
  This is a : separated list of strings to be removed from fields
  before printing. Overridden by the -E option.

## SEE ALSO

awk(1), cut(1)
